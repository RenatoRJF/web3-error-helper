name: Auto Tag on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  create-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access all tags
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latestTag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "latestTag=$latestTag" >> $GITHUB_ENV

      - name: Analyze commits and bump version
        id: bump
        run: |
          # Get commits since last tag
          lastTag=${{ env.latestTag }}
          commits=$(git log --pretty=format:"%s" ${lastTag}..HEAD)
          
          # Initialize version bump type
          bumpType="patch"
          
          # Check for breaking changes (major)
          if echo "$commits" | grep -q "BREAKING CHANGE\|!:"; then
            bumpType="major"
          # Check for new features (minor)
          elif echo "$commits" | grep -q "^feat:"; then
            bumpType="minor"
          # Check for other types (patch)
          elif echo "$commits" | grep -q "^fix:\|^docs:\|^style:\|^refactor:\|^test:\|^chore:"; then
            bumpType="patch"
          fi
          
          echo "bumpType=$bumpType" >> $GITHUB_ENV
          
          # Calculate new version
          version=${lastTag#v}
          IFS='.' read -r major minor patch <<< "$version"
          
          case $bumpType in
            "major")
              newVersion="$((major+1)).0.0"
              ;;
            "minor")
              newVersion="$major.$((minor+1)).0"
              ;;
            "patch")
              newVersion="$major.$minor.$((patch+1))"
              ;;
          esac
          
          echo "newVersion=$newVersion" >> $GITHUB_ENV
          echo "Bumping $bumpType version: $lastTag â†’ v$newVersion"

      - name: Update package.json version
        run: |
          # Update package.json with new version
          npm version ${{ env.newVersion }} --no-git-tag-version
          
          # Commit the version update
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add package.json
          git commit -m "chore: bump version to ${{ env.newVersion }}"
          
          # Set up the remote URL with token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Push the version update commit
          git push origin main

      - name: Create and push tag
        run: |
          # Set up the remote URL with token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          git tag -a "v${{ env.newVersion }}" -m "Auto tag v${{ env.newVersion }} (${{ env.bumpType }} bump)"
          git push origin "v${{ env.newVersion }}"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          scope: '@renatoferreira'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build package
        run: pnpm run build

      - name: Publish to NPM
        run: pnpm publish --access public --no-git-checks
